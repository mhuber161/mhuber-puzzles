# euler problem 12
#   Matthew Huber, 3-21-2013

# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 
#     1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# 
# The first ten terms would be:
#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

import math

# returns the number of divisors of n
def getNumDivisors(n):
    divisors = 0
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 2   # each is coupled with another that is > sqrt(n)

    return divisors

# returns first triangle number to have over n divisors
def getTriangleDivisors(n):
    current = 0
    i = 1
    while True:
        current += i
        i += 1
        if getNumDivisors(current) > n:
            return current


result = getTriangleDivisors(500)

print(result)


